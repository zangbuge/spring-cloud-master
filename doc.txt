在微服务架构中，需要几个基础的服务治理组件，包括服务注册与发现、服务消费、负载均衡、断路器、智能路由、配置管理等，
由这几个基础组件相互协作，共同组建了一个简单的微服务系统
Spring cloud 有两种服务调用方式，一种是 ribbon+restTemplate，另一种是 feign
启动程序，多次访问 http://localhost:8765/hi?name=forezp, 浏览器交替显示

Eureka 注册中心: 注册与发现服务

Feign 声明式的伪Http客户端, 默认集成了 ribbon, Hystrix, 它使得写Http客户端变得更简单
    Ribbon 是一个负载均衡客户端, 负载均衡默认使用的最经典的Round Robin轮询算法
    Hystrix 具有熔断的能力(Feign默认没有打开,开启设置: feign.hystrix.enabled=true)

Zuul 微服务网关(即配置路由)
    Zuul的主要功能是路由转发和过滤器。路由功能是微服务的一部分，zuul默认和Ribbon结合实现了负载均衡的功能。
    比如／api/user转发到到user服务，/api/shop转发到到shop服务。
    一种常见的负载均衡方式是，客户端的请求首先经过负载均衡(zuul、Ngnix)，
    再到达服务网关(zuul集群)，然后再到具体的服务
    依次运行这五个工程;打开浏览器访问：
    http://localhost:8769/api-a/hi?name=forezp ;浏览器显示：hi forezp,i am from port:8762
    http://localhost:8769/api-b/hi?name=forezp ;浏览器显示：hi forezp,i am from port:8762

spring-cloud-config 由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件
    spring cloud config 组件中，分两个角色，一是config server，二是config client
    它支持配置服务放在配置服务的内存中（即本地），也支持放在远程Git仓库
    config-client从config-server获取了foo的属性，而config-server是从git仓库读取

    远程仓库https://github.com/forezp/SpringcloudConfig/ 中有个文件config-client-dev.properties文件中有一个属性：
    foo = foo version 3
    启动client程序：访问http://localhost:8888/foo/dev
